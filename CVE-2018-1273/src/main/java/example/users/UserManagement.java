/*
 * Copyright 2015-2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package example.users;

import java.util.Optional;
import java.util.stream.IntStream;

import javax.annotation.PostConstruct;
import javax.transaction.Transactional;

import lombok.RequiredArgsConstructor;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

@Transactional
@Service
//@RequiredArgsConstructor
public class UserManagement {

	private final UserRepository repository;
	private final PasswordEncoder encoder;

	public UserManagement(final UserRepository repository, final PasswordEncoder encoder) {
		this.repository = repository;
		this.encoder = encoder;
	}

	public User register(Username username, Password password) {

		Assert.notNull(username, "Username must not be null!");
		Assert.notNull(password, "Password must not be null!");

		repository.findByUsername(username).ifPresent(user -> {
			throw new IllegalArgumentException("User with that name already exists!");
		});

		Password encryptedPassword = Password.encrypted(encoder.encode(password));

		return repository.save(new User(username, encryptedPassword));
	}


	public Page<User> findAll(Pageable pageable) {

		Assert.notNull(pageable, "Pageable must not be null!");

		return repository.findAll(pageable);
	}


	public Optional<User> findByUsername(Username username) {

		Assert.notNull(username, "Username must not be null!");

		return repository.findByUsername(username);
	}


	@PostConstruct
	public void init() {

		IntStream.range(0, 41).forEach(index -> {
			register(new Username("user" + index), Password.raw("foobar"));
		});
	}
}
